module mod_rk
  use mod_param, only: is_forced,velf
  use mod_debug, only: chkmean
  use mod_mom  , only: momxad,momyad,momzad,momxp,momyp,momzp
  use mod_momd , only: momxpd,momypd,momzpd,momxa,momya,momza
  use mod_moms , only: momsad
  use mod_bound , only: updthalo
  use mod_types
  implicit none
  private
# if defined(VSIAM)
  public Fake_VSIAM, Fake_VSIAM_init
  public ux, uy, uz, vx, vy, vz, wx, wy, wz
  Real(rp) :: tvb_m = 0._rp    ! totoal varation bounded for CIP-CSL3
  Real(rp) :: tec_m = 1.0_rp  ! modification for time evolution compute
  Real(rp) :: grad_m = 1._rp  ! modification for time evolution compute
  Real(rp), dimension(:,:,:), allocatable :: ux, uy, uz, vx, vy, vz, wx, wy, wz
  Real(rp), dimension(:,:,:), allocatable :: ucip, vcip, wcip
  Real(rp), dimension(:), allocatable :: dx, dy, dz, dxc, dyc, dzc
# else
  public rk,rk_id
# endif
  contains
  subroutine rk(rkpar,n,dli,dzci,dzfi,dzflzi,dzclzi,visc,dt,l,u,v,w,p,dudtrko,dvdtrko,dwdtrko,tauxo,tauyo,tauzo,up,vp,wp,f)
    !
    ! low-storage 3rd-order Runge-Kutta scheme 
    ! for time integration of the momentum equations.
    !
    implicit none
    real(rp), intent(in), dimension(2) :: rkpar
    integer , intent(in), dimension(3) :: n
    real(rp), intent(in) :: visc,dt
    real(rp), intent(in   ), dimension(3) :: dli,l 
    real(rp), intent(in   ), dimension(0:) :: dzci,dzfi,dzflzi,dzclzi
    real(rp), intent(in   ), dimension(0:,0:,0:) :: u ,v ,w,p
    real(rp), intent(inout), dimension(:,:,:) :: dudtrko,dvdtrko,dwdtrko
    real(rp), intent(inout), dimension(3) :: tauxo,tauyo,tauzo
    real(rp), intent(out), dimension(0:,0:,0:) :: up,vp,wp
    real(rp), intent(out), dimension(3) :: f
    real(rp),              dimension(n(1),n(2),n(3)) :: dudtrk,dvdtrk,dwdtrk
    real(rp) :: factor1,factor2,factor12
    real(rp), dimension(3) :: taux,tauy,tauz
    integer :: i,j,k
    real(rp) :: mean
    !
    factor1 = rkpar(1)*dt
    factor2 = rkpar(2)*dt
    factor12 = factor1 + factor2
    !
    call momxp(n(1),n(2),n(3),dli(1),p,dudtrk)
    call momyp(n(1),n(2),n(3),dli(2),p,dvdtrk)
    call momzp(n(1),n(2),n(3),dzci  ,p,dwdtrk)
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor12,u,v,w,up,vp,wp,dudtrk,dvdtrk,dwdtrk)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          up(i,j,k) = u(i,j,k) + factor12*dudtrk(i,j,k)
          vp(i,j,k) = v(i,j,k) + factor12*dvdtrk(i,j,k)
          wp(i,j,k) = w(i,j,k) + factor12*dwdtrk(i,j,k)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    call momxad(n(1),n(2),n(3),dli(1),dli(2),dli(3),dzci,dzfi,dzflzi,visc,u,v,w,dudtrk,taux)
    call momyad(n(1),n(2),n(3),dli(1),dli(2),dli(3),dzci,dzfi,dzflzi,visc,u,v,w,dvdtrk,tauy)
    call momzad(n(1),n(2),n(3),dli(1),dli(2),dli(3),dzci,dzfi,dzflzi,visc,u,v,w,dwdtrk,tauz)
    f(1) = (factor1*sum(taux(:)/l(:)) + factor2*sum(tauxo(:)/l(:)))
    f(2) = (factor1*sum(tauy(:)/l(:)) + factor2*sum(tauyo(:)/l(:)))
    f(3) = (factor1*sum(tauz(:)/l(:)) + factor2*sum(tauzo(:)/l(:)))
    tauxo(:) = taux(:)
    tauyo(:) = tauy(:)
    tauzo(:) = tauz(:)
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor1,factor2,up,vp,wp,dudtrk,dvdtrk,dwdtrk,dudtrko,dvdtrko,dwdtrko)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          ! could be split in two loops, because factor2=0 for istep=1, but like this reads nicer
          up(i,j,k) = up(i,j,k) + factor1*dudtrk(i,j,k) + factor2*dudtrko(i,j,k)
          vp(i,j,k) = vp(i,j,k) + factor1*dvdtrk(i,j,k) + factor2*dvdtrko(i,j,k)
          wp(i,j,k) = wp(i,j,k) + factor1*dwdtrk(i,j,k) + factor2*dwdtrko(i,j,k)
          dudtrko(i,j,k) = dudtrk(i,j,k)
          dvdtrko(i,j,k) = dvdtrk(i,j,k)
          dwdtrko(i,j,k) = dwdtrk(i,j,k)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    !
    ! bulk velocity forcing
    !
    f(:) = 0.
    if(is_forced(1)) then
      call chkmean(n,dzflzi,up,mean)
      f(1) = velf(1) - mean
    endif
    if(is_forced(2)) then
      call chkmean(n,dzflzi,vp,mean)
      f(2) = velf(2) - mean
    endif
    if(is_forced(3)) then
      call chkmean(n,dzclzi,wp,mean)
      f(3) = velf(3) - mean
    endif
    return
  end subroutine rk
  subroutine rk_id(rkpar,n,dli,dzci,dzfi,dzflzi,dzclzi,visc,dt,l,u,v,w,p,dudtrko,dvdtrko,dwdtrko,tauxo,tauyo,tauzo,up,vp,wp,f)
    !
    ! low-storage 3rd-order Runge-Kutta scheme 
    ! for time integration of the momentum equations with implicit diffusion.
    !
    implicit none
    real(rp), intent(in), dimension(2) :: rkpar
    integer , intent(in), dimension(3) :: n
    real(rp), intent(in) :: visc,dt
    real(rp), intent(in   ), dimension(3) :: dli,l 
    real(rp), intent(in   ), dimension(0:) :: dzci,dzfi,dzflzi,dzclzi
    real(rp), intent(in   ), dimension(0:,0:,0:) :: u ,v ,w,p
    real(rp), intent(inout), dimension(:,:,:) :: dudtrko,dvdtrko,dwdtrko
    real(rp), intent(inout), dimension(3) :: tauxo,tauyo,tauzo
    real(rp), intent(out), dimension(0:,0:,0:) :: up,vp,wp
    real(rp), intent(out), dimension(3) :: f
    real(rp),              dimension(n(1),n(2),n(3)) :: dudtrk , dvdtrk , dwdtrk
    real(rp),              dimension(n(1),n(2),n(3)) :: dudtrkd, dvdtrkd, dwdtrkd
    real(rp) :: factor1,factor2,factor12
    real(rp), dimension(3) :: taux,tauy,tauz
    integer :: i,j,k
    real(rp) :: mean
    !
    factor1 = rkpar(1)*dt
    factor2 = rkpar(2)*dt
    factor12 = factor1 + factor2
    !
    call momxpd(n(1),n(2),n(3),dli(1),dli(2),dzci,dzfi,dzflzi,visc,p,u,dudtrk,dudtrkd,taux)
    call momypd(n(1),n(2),n(3),dli(2),dli(2),dzci,dzfi,dzflzi,visc,p,v,dvdtrk,dvdtrkd,tauy)
    call momzpd(n(1),n(2),n(3),dli(1),dli(2),dzci,dzfi,dzflzi,visc,p,w,dwdtrk,dwdtrkd,tauz)
    f(1) = factor12*sum(taux(:)/l(:))
    f(2) = factor12*sum(tauy(:)/l(:))
    f(3) = factor12*sum(tauz(:)/l(:))
    ! alternatively, calculate force from the mean velocity directly
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor12,u,v,w,up,vp,wp,dudtrk,dvdtrk,dwdtrk)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          up(i,j,k) = u(i,j,k) + factor12*dudtrk(i,j,k)
          vp(i,j,k) = v(i,j,k) + factor12*dvdtrk(i,j,k)
          wp(i,j,k) = w(i,j,k) + factor12*dwdtrk(i,j,k)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    call momxa(n(1),n(2),n(3),dli(1),dli(2),dzci,dzfi,u,v,w,dudtrk)
    call momya(n(1),n(2),n(3),dli(1),dli(2),dzci,dzfi,u,v,w,dvdtrk)
    call momza(n(1),n(2),n(3),dli(1),dli(2),dzci,dzfi,u,v,w,dwdtrk)
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor1,factor2,up,vp,wp,dudtrk,dvdtrk,dwdtrk,dudtrko,dvdtrko,dwdtrko)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          ! could be split in two loops, because factor2=0 for istep=1, but like this reads nicer
          up(i,j,k) = up(i,j,k) + factor1*dudtrk(i,j,k) + factor2*dudtrko(i,j,k)
          vp(i,j,k) = vp(i,j,k) + factor1*dvdtrk(i,j,k) + factor2*dvdtrko(i,j,k)
          wp(i,j,k) = wp(i,j,k) + factor1*dwdtrk(i,j,k) + factor2*dwdtrko(i,j,k)
          dudtrko(i,j,k) = dudtrk(i,j,k)
          dvdtrko(i,j,k) = dvdtrk(i,j,k)
          dwdtrko(i,j,k) = dwdtrk(i,j,k)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    !
    ! bulk velocity forcing
    !
    f(:) = 0.
    if(is_forced(1)) then
      call chkmean(n,dzflzi,up,mean)
      f(1) = velf(1) - mean
    endif
    if(is_forced(2)) then
      call chkmean(n,dzflzi,vp,mean)
      f(2) = velf(2) - mean
    endif
    if(is_forced(3)) then
      call chkmean(n,dzclzi,wp,mean)
      f(3) = velf(3) - mean
    endif
    !
    ! compute rhs of helmholtz equation
    !
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor12,factor2,visc,up,vp,wp,dudtrkd,dvdtrkd,dwdtrkd)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          up(i,j,k) = up(i,j,k) - .5*factor12*dudtrkd(i,j,k)
          vp(i,j,k) = vp(i,j,k) - .5*factor12*dvdtrkd(i,j,k)
          wp(i,j,k) = wp(i,j,k) - .5*factor12*dwdtrkd(i,j,k)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    return
  end subroutine rk_id
  subroutine rk_scal(rkpar,n,dli,dzci,dzfi,dzflzi,dzclzi,visc,dt,u,v,w,dsdtrko,s)
    !
    ! low-storage 3rd-order Runge-Kutta scheme 
    ! for time integration of the scalar field.
    !
    implicit none
    real(rp), intent(in   ), dimension(2) :: rkpar
    integer , intent(in   ), dimension(3) :: n
    real(rp), intent(in   ), dimension(3) :: dli
    real(rp), intent(in   ), dimension(0:) :: dzci,dzfi,dzflzi,dzclzi
    real(rp), intent(in   ) :: visc,dt
    real(rp), intent(in   ), dimension(0:,0:,0:) :: u,v,w
    real(rp), intent(inout), dimension(:,:,:) :: dsdtrko
    real(rp), intent(inout), dimension(0:,0:,0:) :: s
    real(rp),              dimension(n(1),n(2),n(3)) :: dsdtrk
    real(rp) :: factor1,factor2,factor12
    integer :: i,j,k
    !
    factor1 = rkpar(1)*dt
    factor2 = rkpar(2)*dt
    factor12 = factor1 + factor2
    call momsad(n(1),n(2),n(3),dli(1),dli(2),dli(3),dzci,dzfi,dzflzi,visc,u,v,w,s,dsdtrk)
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor1,factor2,s,dsdtrk,dsdtrko)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          s(i,j,k) = s(i,j,k) + factor1*dsdtrk(i,j,k) + factor2*dsdtrko(i,j,k)
          dsdtrko(i,j,k) = dsdtrk(i,j,k)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    return
  end subroutine rk_scal
    
# if defined(VSIAM)
    Subroutine Fake_VSIAM_init(n,dli)
      Implicit None
      integer , intent(in), dimension(3) :: n
      real(rp), intent(in   ), dimension(3) :: dli
      ! CIP variables
      allocate(ucip( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          vcip(0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          wcip(0:n(1)+1,0:n(2)+1,0:n(3)+1))
      allocate(ux( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          uy( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          uz( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          vx( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          vy( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          vz( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          wx( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          wy( 0:n(1)+1,0:n(2)+1,0:n(3)+1), &
          wz(0:n(1)+1,0:n(2)+1,0:n(3)+1))
      allocate(dx(0:n(1)+1))
      allocate(dy(0:n(2)+1))
      allocate(dz(0:n(3)+1))
      allocate(dxc(0:n(1)+1))
      allocate(dyc(0:n(2)+1))
      allocate(dzc(0:n(3)+1))
      ucip = 0.0_rp
      vcip = 0.0_rp
      wcip = 0.0_rp
      ux   = 0.0_rp
      vx   = 0.0_rp
      wx   = 0.0_rp
      uy   = 0.0_rp
      vy   = 0.0_rp
      wy   = 0.0_rp
      uz   = 0.0_rp
      vz   = 0.0_rp
      wz   = 0.0_rp
      dx  = dli(1)
      dxc = dli(1)
      dy  = dli(2)
      dyc = dli(2)
      dz  = dli(3)
      dzc = dli(3)


    end Subroutine Fake_VSIAM_init

  subroutine Fake_VSIAM(rkpar,n,dli,dzci,dzfi,dzflzi,dzclzi,visc,dt,l,u,v,w,p,up,vp,wp,f)
    !
    ! A very simplified VSIAM...
    ! Cell-centered variables are obtained from the interpolation of the Face-centered variables
    !
    implicit none
    real(rp), intent(in), dimension(2) :: rkpar
    integer , intent(in), dimension(3) :: n
    real(rp), intent(in) :: visc,dt
    real(rp), intent(in   ), dimension(3) :: dli,l 
    real(rp), intent(in   ), dimension(0:) :: dzci,dzfi,dzflzi,dzclzi
    real(rp), intent(in   ), dimension(0:,0:,0:) :: u ,v ,w,p
    real(rp), intent(out), dimension(0:,0:,0:) :: up,vp,wp
    real(rp), intent(out), dimension(3) :: f
    real(rp),              dimension(n(1),n(2),n(3)) :: dudtrk,dvdtrk,dwdtrk
    real(rp),              dimension(0:n(1)+1,0:n(2)+1,0:n(3)+1) :: un, vn, wn
    real(rp) :: factor1,factor2,factor12
    real(rp), dimension(3) :: taux,tauy,tauz
    integer :: i,j,k
    real(rp) :: mean

# if defined (VSIAM)
    integer :: itp
# endif


    !
    factor1 = rkpar(1)*dt
    factor2 = rkpar(2)*dt
    factor12 = factor1 + factor2
    !

    ! advection
    itp = 1
    Call CIP3D(itp,Up, UX, UY, UZ, U,UX,UY,UZ,V,VX,VY,VZ,W,WX,WY,WZ &
        &		, DX,DXC,DY,DYC,DZ,DZC , n(1), n(2),n(3),dt )
    itp = 2
    Call CIP3D(itp,Vp, VX, VY, VZ, U,UX,UY,UZ,V,VX,VY,VZ,W,WX,WY,WZ &
        &		, DX,DXC,DY,DYC,DZ,DZC , n(1), n(2),n(3),dt )
    itp = 3
    Call CIP3D(itp,Wp, WX, WY, WZ, U,UX,UY,UZ,V,VX,VY,VZ,W,WX,WY,WZ &
        &		, DX,DXC,DY,DYC,DZ,DZC , n(1), n(2),n(3),dt )

    call momxp(n(1),n(2),n(3),dli(1),p,dudtrk)
    call momyp(n(1),n(2),n(3),dli(2),p,dvdtrk)
    call momzp(n(1),n(2),n(3),dzci  ,p,dwdtrk)


    ! pressure
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor12,u,v,w,up,vp,wp,dudtrk,dvdtrk,dwdtrk)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          up(i,j,k) = up(i,j,k) + factor12*dudtrk(i,j,k)
          vp(i,j,k) = vp(i,j,k) + factor12*dvdtrk(i,j,k)
          wp(i,j,k) = wp(i,j,k) + factor12*dwdtrk(i,j,k)
        enddo
      enddo
    enddo


    ! diffusion
    !$OMP END PARALLEL DO
    call momxdiff(n(1),n(2),n(3),dli(1),dli(2),dli(3),dzci,dzfi,dzflzi,visc,u,v,w,dudtrk,taux)
    call momydiff(n(1),n(2),n(3),dli(1),dli(2),dli(3),dzci,dzfi,dzflzi,visc,u,v,w,dvdtrk,tauy)
    call momzdiff(n(1),n(2),n(3),dli(1),dli(2),dli(3),dzci,dzfi,dzflzi,visc,u,v,w,dwdtrk,tauz)

    f(1) = (factor1*sum(taux(:)/l(:)) + factor2*sum(tauxo(:)/l(:)))
    f(2) = (factor1*sum(tauy(:)/l(:)) + factor2*sum(tauyo(:)/l(:)))
    f(3) = (factor1*sum(tauz(:)/l(:)) + factor2*sum(tauzo(:)/l(:)))
    tauxo(:) = taux(:)
    tauyo(:) = tauy(:)
    tauzo(:) = tauz(:)
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k) &
    !$OMP SHARED(n,factor1,factor2,up,vp,wp,dudtrk,dvdtrk,dwdtrk,dudtrko,dvdtrko,dwdtrko)
    do k=1,n(3)
      do j=1,n(2)
        do i=1,n(1)
          ! could be split in two loops, because factor2=0 for istep=1, but like this reads nicer
          up(i,j,k) = up(i,j,k) + factor1*dudtrk(i,j,k) + factor2*dudtrko(i,j,k)
          vp(i,j,k) = vp(i,j,k) + factor1*dvdtrk(i,j,k) + factor2*dvdtrko(i,j,k)
          wp(i,j,k) = wp(i,j,k) + factor1*dwdtrk(i,j,k) + factor2*dwdtrko(i,j,k)
          dudtrko(i,j,k) = dudtrk(i,j,k)
          dvdtrko(i,j,k) = dvdtrk(i,j,k)
          dwdtrko(i,j,k) = dwdtrk(i,j,k)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    !
    ! bulk velocity forcing
    !
    f(:) = 0.
    if(is_forced(1)) then
      call chkmean(n,dzflzi,up,mean)
      f(1) = velf(1) - mean
    endif
    if(is_forced(2)) then
      call chkmean(n,dzflzi,vp,mean)
      f(2) = velf(2) - mean
    endif
    if(is_forced(3)) then
      call chkmean(n,dzclzi,wp,mean)
      f(3) = velf(3) - mean
    endif
    return
  end subroutine Fake_VSIAM

subroutine CIP3D(itp,F, GX, GY, GZ, U,UX,UY,UZ,V,VX,VY,VZ,W,WX,WY,WZ &
			&		, DX,DXC,DY,DYC,DZ,DZC , nx,ny,nz,dt )

	implicit none

	integer , intent(in)	::	itp
    
	Real(rp) , intent(in)	::	dt
	integer , intent(in)	::	nx
	integer , intent(in)	::	ny
	integer , intent(in)	::	nz
    

	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	U
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	UX
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	UY
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	UZ
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	V
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	VX
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	VY
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	VZ
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	W
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	WX
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	WY
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1) , intent(in)	::	WZ
 Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	 , intent(out)::	F   
 Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	 , intent(out)::	GX
 Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	 , intent(out)::	GY
 Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	 , intent(out)::	GZ

	Real(rp) , dimension(0:nx+1) , intent(in)	::	DX
	Real(rp) , dimension(0:nx+1) , intent(in)	::	DXC
	Real(rp) , dimension(0:ny+1) , intent(in)	::	DY
	Real(rp) , dimension(0:ny+1) , intent(in)	::	DYC
	Real(rp) , dimension(0:nz+1) , intent(in)	::	DZ
	Real(rp) , dimension(0:nz+1) , intent(in)	::	DZC
    

	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	::	FA
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	::	UC
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	::	VC
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	::	WC
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	::	GXA
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	::	GYA
	Real(rp) , dimension(0:nx+1,0:ny+1,0:nz+1)	::	GZA

	Real(rp) , dimension(0:nx+1)	::	DXA
	Real(rp) , dimension(0:ny+1)	::	DYA
	Real(rp) , dimension(0:nz+1)	::	DZA

	Real(rp)	::	csmt,csmt1
	Real(rp)	::	xx,yy,zz
	Real(rp)	::	dx1,dy1,dz1 , dx2,dy2,dz2 , dx3,dy3,dz3
	Real(rp)	::	a300,a030,a003,a210,a120,a201,a102,a021,a012,a111
	Real(rp)	::	a200,a020,a002,a110,a101,a011,a100,a010,a001,a000
	Real(rp)	::	c00,c10,c01,c11
	Real(rp)	::	tmp1,tmp2,tmp3
	Real(rp)	::	tmp210,tmp021,tmp201
	Real(rp)	::	tmp120,tmp012,tmp102
	Real(rp)	::	chck
	Real(rp)	::	phi20
	Real(rp)	::	fa0,gxa0,gya0
    
	integer	::	im1,jm1,km1 , isn,jsn,ksn , ima1,jma1,kma1 
	integer	::	i,j,k

	if (int(itp).EQ.1) then
        F=U
        GX=UX
        GY=UY
        GZ=UZ
    elseif (int(itp).EQ.2) then
        F=V
        GX=VX
        GY=VY
        GZ=VZ
    elseif (int(itp).EQ.3) then
    	F=W
    	GX=WX
    	GY=WY
    	GZ=WZ
    end if

	csmt  = 1.0

	DXA(0:nx+1) =  DX(0:nx+1)
	DYA(0:ny+1) =  DY(0:ny+1)
	DZA(0:nz+1) =  DZ(0:nz+1)

	if ( int(itp).EQ.1 ) then
 
		UC(1:nx,1:ny,1:nz) = U(1:nx,1:ny,1:nz)
		do j=1,ny
		do k=1,nz
			VC(1:nx,j,k)=0.25*( ( V(1:nx,j,k)   + V(1:nx,j-1,k) )*DX(2:nx+1) +  &
				&			  ( V(2:nx+1,j,k) + V(2:nx+1,j-1,k) )*DX(1:nx)   )  &
                &           / DXC(1:nx)
            WC(1:nx,j,k)=0.25*( ( W(1:nx,j,k)   + W(1:nx,j,k-1) )*DX(2:nx+1) +  &
				&			  ( W(2:nx+1,j,k) + W(2:nx+1,j,k-1) )*DX(1:nx)   )  &
                &           / DXC(1:nx)
		end do
		end do
 
		DXA(1:nx) 	=  DX(1:nx)
		DYA(1:ny)	=  DYC(0:ny-1)
		DZA(1:nz)	=  DZC(0:nz-1)


	elseif ( int(itp).EQ.2 ) then

		VC(1:nx,1:ny,1:nz) = V(1:nx,1:ny,1:nz)
		do k = 1,nz
		do i = 1,nx
			UC(i,1:ny,k)=0.25*( (U(i,1:ny,k)   + U(i-1,1:ny,k)  )*DY(2:ny+1) + &
				&			  (U(i,2:ny+1,k) + U(i-1,2:ny+1,k))*DY(1:ny)  )  &
				&		/DYC(1:ny)
			WC(i,1:ny,k)=0.25*( (W(i,1:ny,k)   + W(i,1:ny,k-1)  )*DY(2:ny+1) + &
				&			  (W(i,2:ny+1,k) + W(i,2:ny+1,k-1))*DY(1:ny)  )  &
				&		/DYC(1:ny)
		end do
		end do
 
		DXA(1:nx) 	=  DXC(0:nx-1)
		DYA(1:ny)	=  DY(1:ny)
		DZA(1:nz)	=  DZC(0:nz-1)


	elseif ( int(itp).EQ.3 ) then
 
		WC(1:nx,1:ny,1:nz) = W(1:nx,1:ny,1:nz)
		do j = 1,ny
		do i = 1,nx
			UC(i,j,1:nz)=0.25*( (U(i,j,1:nz)   + U(i-1,j,1:nz)  )*DZ(2:nz+1) + &
				&			  (U(i,j,2:nz+1) + U(i-1,j,2:nz+1))*DZ(1:nz)  )  &
				&		/DZC(1:nz)
			VC(i,j,1:nz)=0.25*( (V(i,j,1:nz)   + V(i,j-1,1:nz)  )*DZ(2:nz+1) + &
				&			  (V(i,j,2:nz+1) + V(i,j-1,2:nz+1))*DZ(1:nz)  )  &
				&		/DZC(1:nz)
		end do
		end do
 
		DXA(1:nx) 	=  DXC(0:nx-1)
		DYA(1:ny)	=  DYC(0:ny-1)
		DZA(1:nz)	=  DZ(1:nz)

	else
 
		UC(1:nx,1:ny,1:nz) = 0.5 * ( U(1:nx,1:ny,1:nz)+U(0:nx-1,1:ny,1:nz) )
        VC(1:nx,1:ny,1:nz) = 0.5 * ( V(1:nx,1:ny,1:nz)+V(1:nx,0:ny-1,1:nz) )
        WC(1:nx,1:ny,1:nz) = 0.5 * ( W(1:nx,1:ny,1:nz)+W(1:nx,1:ny,0:nz-1) )

        DXA(1:nx)=DX(0:nx-1)
		DYA(1:ny)=DY(0:ny-1)
		DZA(1:nz)=DZ(0:nz-1)
 

 	end if
 
 	DXA(0)=DXA(1)
 	DYA(0)=DYA(1)
 	DZA(0)=DZA(1)
	DXA(nx+1)=DXA(nx)
 	DYA(ny+1)=DYA(ny)
 	DZA(nz+1)=DZA(nz)
 
 	do k = 1,nz
 	do j = 1,ny
 	do i = 1,nx
 
 
    	xx   = -UC(i,j,k)*dt
		yy   = -VC(i,j,k)*dt
		zz   = -WC(i,j,k)*dt
		isn  =  dsign(1._rp,UC(i,j,k))
		jsn  =  dsign(1._rp,VC(i,j,k))
		ksn  =  dsign(1._rp,WC(i,j,k))
        if (UC(i,j,k).EQ.0) isn=0
        if (VC(i,j,k).EQ.0) jsn=0
        if (WC(i,j,k).EQ.0) ksn=0
		im1  =  i-isn
		jm1  =  j-jsn
		km1  =  k-ksn

		ima1 =  MAX(im1,I)
		jma1 =  MAX(jm1,J)
		kma1 =  MAX(km1,k)
        
		dx1  =  1._rp/DXA(ima1)
		dy1  =  1._rp/DYA(jma1)
		dz1  =  1._rp/DZA(kma1)
		dx2  =  dx1*dx1
		dx3  =  dx2*dx1
		dy2  =  dy1*dy1
		dy3  =  dy2*dy1
		dz2  =  dz1*dz1
		dz3  =  dz2*dz1

		a300 =  ((GX(im1,j,k)+GX(i,j,k))*DXA(ima1)*isn-2.0*(F(i,j,k)-F(im1,j,k)))*dx3*isn  
		a030 =  ((GY(i,jm1,k)+GY(i,j,k))*DYA(jma1)*jsn-2.0*(F(i,j,k)-F(i,jm1,k)))*dy3*jsn
		a003 =  ((GZ(i,j,km1)+GZ(i,j,k))*DZA(kma1)*ksn-2.0*(F(i,j,k)-F(i,j,km1)))*dz3*ksn

		a200 =  (3.0*(F(im1,j,k)-F(i,j,k))+(GX(im1,j,k)+2.0*GX(i,j,k))*DXA(ima1)*isn)*dx2
		a020 =  (3.0*(F(i,jm1,k)-F(i,j,k))+(GY(i,jm1,k)+2.0*GY(i,j,k))*DYA(jma1)*jsn)*dy2
		a002 =  (3.0*(F(i,j,km1)-F(i,j,k))+(GZ(i,j,km1)+2.0*GZ(i,j,k))*DZA(kma1)*ksn)*dz2

		tmp1 =  F(i,j,k)-F(i,jm1,k)-F(im1,j,k)+F(im1,jm1,k)
		tmp2 =  F(i,j,k)-F(im1,j,k)-F(i,j,km1)+F(im1,j,km1)
		tmp3 =  F(i,j,k)-F(i,jm1,k)-F(i,j,km1)+F(i,jm1,km1)
        
        tmp210 =  GX(i,jm1,k)-GX(i,j,k)
        tmp120 =  GY(im1,j,k)-GY(i,j,k)
    	tmp201 =  GX(i,j,km1)-GX(i,j,k)
    	tmp102 =  GZ(im1,j,k)-GZ(i,j,k)
    	tmp021 =  GY(i,j,km1)-GY(i,j,k)
    	tmp012 =  GZ(i,jm1,k)-GZ(i,j,k)

    	a210 =  (-tmp1 -tmp210*DXA(ima1)*isn)*dx2*dy1*jsn      
    	a120 =  (-tmp1 -tmp120*DYA(jma1)*jsn)*dx1*dy2*isn  
    	a201 =  (-tmp2 -tmp201*DXA(ima1)*isn)*dx2*dz1*ksn
    	a102 =  (-tmp2 -tmp102*DZA(kma1)*ksn)*dx1*dz2*isn  
    	a021 =  (-tmp3 -tmp021*DYA(jma1)*jsn)*dy2*dz1*ksn  
    	a012 =  (-tmp3 -tmp012*DZA(kma1)*ksn)*dy1*dz2*jsn 

    	a110 =  (-tmp1-tmp210*DXA(ima1)*isn-tmp120*DYA(jma1)*jsn)*dx1*dy1*isn*jsn
    	a101 =  (-tmp2-tmp201*DXA(ima1)*isn-tmp102*DZA(kma1)*ksn)*dx1*dz1*isn*ksn 
    	a011 =  (-tmp3-tmp021*DYA(jma1)*jsn-tmp012*DZA(kma1)*ksn)*dy1*dz1*jsn*ksn
        
		
		a111 =  ( F(i,j,k)-F(im1,j,k)-F(i,jm1,k)-F(i,j,km1)	&
				+ F(im1,jm1,k)+F(im1,j,km1)+F(i,jm1,km1)-F(im1,jm1,km1))*dx1*dy1*dz1*isn*jsn*ksn
!------------------------------------------------------------------------
        
        FA(i,j,k) =  ( (a300*xx + a210*yy + a201*zz + a200)*xx + a110*yy + GX(i,j,k) )*xx  &
                  +  ( (a030*yy + a120*xx + a021*zz + a020)*yy + a011*zz + GY(i,j,k) )*yy  &
                  +  ( (a003*zz + a102*xx + a012*yy + a002)*zz + a101*xx + GZ(i,j,k) )*zz  &
                  +   a111*xx*yy*zz + F(i,j,k)
		GXA(i,j,k)=  (3._rp*a300*xx + 2._rp*(a210*yy+a201*zz+a200))*xx + (a120*yy+a111*zz+a110)*yy + (a102*zz+a101)*zz + GX(i,j,k)
        GYA(i,j,k)=  (3._rp*a030*yy + 2._rp*(a120*xx+a021*zz+a020))*yy + (a210*xx+a111*zz+a110)*xx + (a012*zz+a011)*zz + GY(i,j,k)
		GZA(i,j,k)=  (3._rp*a003*zz + 2._rp*(a102*xx+a012*yy+a002))*zz + (a201*xx+a111*yy+a101)*xx + (a021*xx+a011)*yy + GZ(i,j,k)
 
  
  	end do
  	end do
  	end do
  
  	do k=1,nz
    do j=1,ny
    do i=1,nx
      
        F(i,j,k)=FA(i,j,k)

        GX(i,j,k)=GXA(i,j,k)-                                   &
     &          (GXA(i,j,k)*(UC(i+1,j,k)-UC(i-1,J,k))           &
     &          +GYA(i,j,k)*(VC(i+1,j,k)-VC(i-1,J,k))           &
     &          +GZA(i,j,k)*(WC(i+1,j,k)-WC(i-1,J,k)))*dt       &
     &          /( 3._rp/2._rp*(DXA(I)+DXA(I+1)) )

        GY(i,j,k)=GYA(i,j,k)-                                   &
     &          (GXA(i,j,k)*(UC(i,j+1,K)-UC(i,j-1,k))           &
     &          +GYA(i,j,k)*(VC(i,j+1,K)-VC(i,j-1,k))           &
     &          +GZA(i,j,k)*(WC(i,j+1,K)-WC(i,j-1,k)))*dt       &
     &          /( 3._rp/2._rp*(DYA(j)+DYA(j+1)) )

        GZ(i,j,k)=GZA(i,j,k)-                                   &
     &          (GXA(i,j,k)*(UC(i,j,k+1)-UC(i,j,k-1))           &
     &          +GYA(i,j,k)*(VC(i,j,k+1)-VC(i,j,k-1))           &
     &          +GZA(i,j,k)*(WC(i,j,k+1)-WC(i,j,k-1)))*dt       &
     &          /( 3._rp/2._rp*(DZA(k)+DZA(k+1)) )
  
	end do
    end do
    end do
    

  end subroutine CIP3D

  subroutine momxdiff(nx,ny,nz,dxi,dyi,dzi,dzci,dzfi,dzflzi,visc,u,v,w,dudt,taux)
    implicit none
    integer , intent(in) :: nx,ny,nz
    real(rp), intent(in) :: dxi,dyi,dzi,visc
    real(rp), intent(in), dimension(0:) :: dzci,dzfi,dzflzi
    real(rp), dimension(0:,0:,0:), intent(in) :: u,v,w
    real(rp), dimension(:,:,:), intent(out) :: dudt
    real(rp), dimension(3)  , intent(out) :: taux
    integer :: im,ip,jm,jp,km,kp,i,j,k
    real(rp) :: uuip,uuim,uvjp,uvjm,uwkp,uwkm
    real(rp) :: dudxp,dudxm,dudyp,dudym,dudzp,dudzm
    integer :: nxg,nyg,nzg
    !
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k,im,jm,km,ip,jp,kp) &
    !$OMP PRIVATE(uuip,uuim,uvjp,uvjm,uwkp,uwkm) &
    !$OMP PRIVATE(dudxp,dudxm,dudyp,dudym,dudzp,dudzm) &
    !$OMP SHARED(nx,ny,nz,dxi,dyi,dzi,visc,u,v,w,dudt,dzci,dzfi,bforce)
    do k=1,nz
      kp = k + 1
      km = k - 1
      do j=1,ny
        jp = j + 1
        jm = j - 1
        do i=1,nx
          ip = i + 1
          im = i - 1
          dudxp = (u(ip,j,k)-u(i,j,k))*dxi
          dudxm = (u(i,j,k)-u(im,j,k))*dxi
          dudyp = (u(i,jp,k)-u(i,j,k))*dyi
          dudym = (u(i,j,k)-u(i,jm,k))*dyi
          dudzp = (u(i,j,kp)-u(i,j,k))*dzci(k)
          dudzm = (u(i,j,k)-u(i,j,km))*dzci(km)
          !
          ! Momentum balance
          !
          dudt(i,j,k) =(dudxp-dudxm)*visc*dxi + &
                       (dudyp-dudym)*visc*dyi + &
                       (dudzp-dudzm)*visc*dzfi(k) + &
                        bforce(1)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    taux(:) = 0.
    do k=1,nz
      do i=1,nx
        dudyp = (u(i,1 ,k)-u(i,0   ,k))*dyi*visc*dzflzi(k)
        dudym = (u(i,ny,k)-u(i,ny+1,k))*dyi*visc*dzflzi(k)
        taux(2) = taux(2) + (dudyp+dudym)
      enddo
    enddo
    do j=1,ny
      do i=1,nx
        dudzp = (u(i,j,1 )-u(i,j,0   ))*dzci(0)*visc
        dudzm = (u(i,j,nz)-u(i,j,nz+1))*dzci(nz)*visc
        taux(3) = taux(3) + (dudzp+dudzm)
      enddo
    enddo
    call mpi_allreduce(MPI_IN_PLACE,taux(1),3,MPI_REAL_RP,MPI_SUM,MPI_COMM_WORLD,ierr)
    nxg = nx*dims(1)
    nyg = ny*dims(2)
    nzg = nz
    taux(1) = taux(1)/(1.*nyg)
    taux(2) = taux(2)/(1.*nxg)
    taux(3) = taux(3)/(1.*nxg*nyg)
    return
  end subroutine momxdiff
  !
  subroutine momydiff(nx,ny,nz,dxi,dyi,dzi,dzci,dzfi,dzflzi,visc,u,v,w,dvdt,tauy)
    implicit none
    integer , intent(in) :: nx,ny,nz
    real(rp), intent(in) :: dxi,dyi,dzi,visc
    real(rp), intent(in), dimension(0:) :: dzci,dzfi,dzflzi
    real(rp), dimension(0:,0:,0:), intent(in) :: u,v,w
    real(rp), dimension(:,:,:), intent(out) :: dvdt
    real(rp), dimension(3), intent(out) :: tauy
    integer :: im,ip,jm,jp,km,kp,i,j,k
    real(rp) :: uvip,uvim,vvjp,vvjm,wvkp,wvkm
    real(rp) :: dvdxp,dvdxm,dvdyp,dvdym,dvdzp,dvdzm
    integer :: nxg,nyg,nzg
    !
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k,im,jm,km,ip,jp,kp) &
    !$OMP PRIVATE(uvip,uvim,vvjp,vvjm,wvkp,wvkm) &
    !$OMP PRIVATE(dvdxp,dvdxm,dvdyp,dvdym,dvdzp,dvdzm) &
    !$OMP SHARED(nx,ny,nz,dxi,dyi,dzi,visc,u,v,w,dvdt,dzci,dzfi,bforce)
    do k=1,nz
      kp = k + 1
      km = k - 1
      do j=1,ny
        jp = j + 1
        jm = j - 1
        do i=1,nx
          ip = i + 1
          im = i - 1
          dvdxp = (v(ip,j,k)-v(i,j,k))*dxi
          dvdxm = (v(i,j,k)-v(im,j,k))*dxi
          dvdyp = (v(i,jp,k)-v(i,j,k))*dyi
          dvdym = (v(i,j,k)-v(i,jm,k))*dyi
          dvdzp = (v(i,j,kp)-v(i,j,k))*dzci(k)
          dvdzm = (v(i,j,k)-v(i,j,km))*dzci(km)
          !
          ! Momentum balance
          !
          dvdt(i,j,k) =(dvdxp-dvdxm)*visc*dxi+ &
                       (dvdyp-dvdym)*visc*dyi+ &
                       (dvdzp-dvdzm)*visc*dzfi(k)+ &
                        bforce(2)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    tauy(:) = 0.
    do k=1,nz
      do j=1,ny
        dvdxp = (v(1 ,j,k)-v(0   ,j,k))*dxi*visc*dzflzi(k)
        dvdxm = (v(nx,j,k)-v(nx+1,j,k))*dxi*visc*dzflzi(k)
        tauy(1) = tauy(1) + (dvdxp+dvdxm)
      enddo
    enddo
    do j=1,ny
      do i=1,nx
        dvdzp = (v(i,j,1 )-v(i,j,0   ))*dzci(0)*visc
        dvdzm = (v(i,j,nz)-v(i,j,nz+1))*dzci(nz)*visc
        tauy(3) = tauy(3) + (dvdzp+dvdzm)
      enddo
    enddo
    call mpi_allreduce(MPI_IN_PLACE,tauy(1),3,MPI_REAL_RP,MPI_SUM,MPI_COMM_WORLD,ierr)
    nxg = nx*dims(1)
    nyg = ny*dims(2)
    nzg = nz
    tauy(1) = tauy(1)/(1.*nyg)
    tauy(2) = tauy(2)/(1.*nxg)
    tauy(3) = tauy(3)/(1.*nxg*nyg)
    return
  end subroutine momydiff
  !
  subroutine momzdiff(nx,ny,nz,dxi,dyi,dzi,dzci,dzfi,dzflzi,visc,u,v,w,dwdt,tauz)
    implicit none
    integer , intent(in) :: nx,ny,nz
    real(rp), intent(in) :: dxi,dyi,dzi,visc
    real(rp), intent(in), dimension(0:) :: dzci,dzfi,dzflzi
    real(rp), dimension(0:,0:,0:), intent(in) :: u,v,w
    real(rp), dimension(:,:,:), intent(out) :: dwdt
    real(rp), dimension(3), intent(out) :: tauz
    integer :: im,ip,jm,jp,km,kp,i,j,k
    real(rp) :: uwip,uwim,vwjp,vwjm,wwkp,wwkm
    real(rp) :: dwdxp,dwdxm,dwdyp,dwdym,dwdzp,dwdzm
    integer :: nxg,nyg,nzg
    !
    !$OMP PARALLEL DO DEFAULT(none) &
    !$OMP PRIVATE(i,j,k,im,jm,km,ip,jp,kp) &
    !$OMP PRIVATE(uwip,uwim,vwjp,vwjm,wwkp,wwkm) &
    !$OMP PRIVATE(dwdxp,dwdxm,dwdyp,dwdym,dwdzp,dwdzm) &
    !$OMP SHARED(nx,ny,nz,dxi,dyi,dzi,visc,u,v,w,dwdt,dzci,dzfi,bforce)
    do k=1,nz
      kp = k + 1
      km = k - 1
      do j=1,ny
        jp = j + 1
        jm = j - 1
        do i=1,nx
          ip = i + 1
          im = i - 1
          dwdxp = (w(ip,j,k)-w(i,j,k))*dxi
          dwdxm = (w(i,j,k)-w(im,j,k))*dxi
          dwdyp = (w(i,jp,k)-w(i,j,k))*dyi
          dwdym = (w(i,j,k)-w(i,jm,k))*dyi
          dwdzp = (w(i,j,kp)-w(i,j,k))*dzfi(kp)
          dwdzm = (w(i,j,k)-w(i,j,km))*dzfi(k)
          !
          ! Momentum balance
          !
          dwdt(i,j,k) = (dwdxp-dwdxm)*visc*dxi+ &
                        (dwdyp-dwdym)*visc*dyi+ &
                        (dwdzp-dwdzm)*visc*dzci(k)+ &
                        bforce(3)
        enddo
      enddo
    enddo
    !$OMP END PARALLEL DO
    tauz(:) = 0.
    do k=1,nz
      do j=1,ny
        dwdxp = (w(1 ,j,k)-w(0   ,j,k))*dxi*visc*dzflzi(k)
        dwdxm = (w(nx,j,k)-w(nx+1,j,k))*dxi*visc*dzflzi(k)
        tauz(1) = tauz(1) + (dwdxp+dwdxm)
      enddo
    enddo
    do k=1,nz
      do i=1,nx
        dwdyp = (w(i,1,k )-w(i,0   ,k))*dyi*visc*dzflzi(k)
        dwdym = (w(i,ny,k)-w(i,ny+1,k))*dyi*visc*dzflzi(k)
        tauz(2) = tauz(2) + (dwdyp+dwdym)
      enddo
    enddo
    call mpi_allreduce(MPI_IN_PLACE,tauz(1),3,MPI_REAL_RP,MPI_SUM,MPI_COMM_WORLD,ierr)
    nxg = nx*dims(1)
    nyg = ny*dims(2)
    nzg = nz
    tauz(1) = tauz(1)/(1.*nyg)
    tauz(2) = tauz(2)/(1.*nxg)
    tauz(3) = tauz(3)/(1.*nxg*nyg)
    return
  end subroutine momzdiff


# endif
    



end module mod_rk
